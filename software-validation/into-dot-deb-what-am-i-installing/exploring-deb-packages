+++
title =  "Into .deb: What am I installing?"
date = 2025-06-17
draft = false
series = "devops"
tags =  ['devops', 'software validation', 'cybesecurity']
+++

So there I was, trying to install Nvidia drivers on my old homelab desktop.  As you would expect from a reasonable engineer, I started with doing a bit of good ole RTFM (read the field manual; or do you due diligence and look at the documentation).

Generally vendor documentation is a good place to start, however, looking at Nvidia Cuda Quick start Guide I saw the following:

![Nvidia driver isntall instructions](nvidia_install_instructions.png)

The highlighted section translates into the following: “thoughtlessly download the .deb package and install it, please.”   It almost looked like a former government employee wrote this.  In the spirit of government documentation, instructions like these should be marked with “WTF” (“Without Thoughtful Foresight”), since their content clearly indicates that the author did not seem to think through the result.  Let’s break this down.

Generally, in it is a good idea to understand the basics of the software validation hygiene.  When the software is distributed, especially for a linux system, there is a healthy expectation of some validation mechanism, whether by a package manager or via checksums.  The package manger relies on public GPG keys distributed by the software authors.  If the GPG keys are not already on the system, it is expected that their fingerprints are validated before installing them into the OS store.  Such fingerprints are typically posted but he software vendors and can be checked with


```bash
gpg —show—keys —with-fingerprints <keyname>
```

The expected software validation process on a Linux system with
a package manager is as follows:

1.  Download software publisher’s public GPG key

1.  Validate public GPG key’s fingerprint

1.  Import GPG keys into OS’s keystroke

1.  Install software with a package manager


With the process above in mind lets dig in a bit deeper by extracting .deb packer the instructions tell us to install. `.deb` packates are `ar` archives
which contain 3 parts:

- `debian-binary`: a text file containing version of .deb package format
- `control.tar.xz`: checksums and package metadata
- `data.tar.xz`: actual things which will be installed on the system

With the validation process above in mind lets dig in a bit deeper by extracting .deb packer the instructions tell us to install.  The .deb package are just `ar` archive containing another three `.tar.xz` archives.  The one we care about is the `data.tar.xz` which will contain the items to be installed on the system.

![extracted gpg key with fingerprint](extracted_gpg_fingerprint.png)

Extracting the `data.tar.xz` reveals two interesting files.  The first one is `cuda-debian12-x86_64.list`, which configures Nvidia apt repo, including the location of the GPG which will be used for validation.  The second file is the `cuda-archive-keyring.gpg` which is the GPG key itself.  Looks like the `.dep` package in question will indeed configure Nvidia apt repo and install a GPG key to validate it.  Let’s see if the GPG key it installs is legitimate.

![fingerprint search](web_search_for_fingerprint.png)

![github repo with matching fingerprints](repo_with_key_fingerprints.png)

Unfortunately Nvidia does not seem to publish their GPG key fingerprints. A quick web search with the key fingerprint does reveal, what seems to be an official Nvidia repo with some package signature validation instructions which seem to indicate our key in question.  This is one of those examples where a devops or a cyber engineer can go so far with GPG keys validation, since the vendor does not seem to care.  This would be a perfect case demonstrating the risk acceptance decisions cybersecurity professionals have to make. However, those decisions are not automatic and should only happen after exercising due diligence.